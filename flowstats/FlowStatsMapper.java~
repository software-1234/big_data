// map function for application to count the number of
// times each unique IP address 4-tuple appears in an
// adudump file.
import java.io.IOException;
import java.util.*;
import java.io.*;
import java.net.*;
import org.apache.hadoop.io.*;
import org.apache.hadoop.util.*;
import org.apache.hadoop.mapreduce.Mapper;

public class FlowStatsMapper
  extends Mapper<LongWritable, Text, Text, Text> {
  @Override
  public void map(LongWritable key, Text value, Context context)
      throws IOException, InterruptedException {
    String line = value.toString();
    String[] tokens = line.split("\\s");
    String IPaddr1 = new String();
    String IPaddr2 = new String();
    String FlowTuple = new String();
    String FlowCount = new String();
    int last_dot;
	// get the two IP address.port fields
        IPaddr1 = tokens[2];
	IPaddr2 = tokens[4];

	// eliminate the port part
	last_dot = IPaddr1.lastIndexOf('.');
	IPaddr1 = IPaddr1.substring(0, last_dot);
	last_dot = IPaddr2.lastIndexOf('.');
	IPaddr2 = IPaddr2.substring(0, last_dot);

        FlowTuple = IPaddr1 + ":" + IPaddr2;

         if (tokens[3].equals(">") ||
             tokens[3].equals("x")) {
             FlowCount = tokens[5] + " " + "0"; //bytes addr1<->addr2
         }
         else if (tokens[3].equals("<")) {
	     FlowCount = "0" + " " + tokens[5]; //bytes addr1<->addr2
              }

        // output the key, value pairs where the key is an
        // IP address Flow-tuple and the value represents bytes in each direction
	 context.write(new Text(FlowTuple), new Text(FlowCount));
  }
}

